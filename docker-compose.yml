version: '3.8'

services:

  keruta-api:
    build: .
    container_name: keruta-api
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_HOST=mongodb
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=keruta
      - SPRING_DATA_MONGODB_USERNAME=admin
      - SPRING_DATA_MONGODB_PASSWORD=password
      - KERUTA_ZOOKEEPER_CONNECT_STRING=zookeeper:2181
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongodb
      - zookeeper
      - kafka
    restart: unless-stopped
    networks:
      - keruta-network

  mongodb:
    image: mongo:latest
    container_name: keruta-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=keruta
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    restart: unless-stopped
    networks:
      - keruta-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: keruta-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - keruta-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: keruta-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - keruta-network

  # Keycloak is configured to automatically import the "keruta" realm from data/keycloak.default.realm.json
  # The realm includes a properly configured client with ID "keruta"
  # 
  # If needed, you can access the admin console at http://localhost:8180/admin/ with admin/admin
  # See keruta-doc/keruta/keycloak_integration.md for detailed instructions on Keycloak configuration
  keycloak:
    image: bitnami/keycloak:latest
    container_name: keruta-keycloak
    ports:
      - "8180:8080"
    environment:
      KEYCLOAK_ADMIN_USER: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KEYCLOAK_DATABASE_VENDOR: postgresql
      KEYCLOAK_DATABASE_HOST: postgres
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: postgres
      KEYCLOAK_DATABASE_PASSWORD: postgres
      KEYCLOAK_DATABASE_SCHEMA: public
      KC_HTTP_ENABLED: 'true'
      KEYCLOAK_EXTRA_ARGS: "--import-realm"
    volumes:
      - ./data/keycloak.default.realm.json:/opt/bitnami/keycloak/data/import/keycloak.default.realm.json
      - keycloak_data:/opt/keycloak/data
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - keruta-network
  postgres:
    image: postgres:15.6-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/db/migrations/00_create_db.sql:/docker-entrypoint-initdb.d/create-db.sql
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - keruta-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped


networks:
  keruta-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  keycloak_data:
    driver: local
  postgres-data:
